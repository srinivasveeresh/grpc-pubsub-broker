package main

import (
	"context"
	"sync"
	"time"

	"github.com/srinivasveeresh/grpc-pubsub-broker/broker"
	pb "github.com/srinivasveeresh/grpc-pubsub-broker/proto"

	"net/http"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	"google.golang.org/grpc/peer"
)

type server struct {
	pb.UnimplementedPubSubServer
	br             *broker.Broker
	peerConns      []pb.PubSubClient
	mu             sync.Mutex
	subscriberMeta map[string]*pb.SubscriberMetadata
}

var (
	messagesPublished = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "pubsub_messages_published_total",
			Help: "Total number of messages published.",
		},
		[]string{"topic"},
	)
	subscribersConnected = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "pubsub_subscribers_connected",
			Help: "Current number of subscribers connected.",
		},
	)
)

func init() {
	prometheus.MustRegister(messagesPublished)
	prometheus.MustRegister(subscribersConnected)

	go func() {
		http.Handle("/metrics", promhttp.Handler())
		http.ListenAndServe(":2112", nil)
	}()
}

func (s *server) Publish(ctx context.Context, msg *pb.Message) (*pb.Ack, error) {
	s.br.Publish(msg.Topic, msg.Data)
	for _, peer := range s.peerConns {
		_, _ = peer.Forward(context.Background(), msg)
	}
	messagesPublished.WithLabelValues(msg.Topic).Inc()
	return &pb.Ack{Status: "ok"}, nil
}

func (s *server) PublishToSubscriber(ctx context.Context, req *pb.TargetedMessage) (*pb.Ack, error) {
	s.br.PublishToSubscriber(req.Topic, req.SubscriberId, req.Data)
	return &pb.Ack{Status: "ok"}, nil
}

func (s *server) PublishToSubscribers(ctx context.Context, req *pb.TargetedGroupMessage) (*pb.Ack, error) {
	for _, id := range req.SubscriberIds {
		s.br.PublishToSubscriber(req.Topic, id, req.Data)
	}
	return &pb.Ack{Status: "ok"}, nil
}

func (s *server) Forward(ctx context.Context, msg *pb.Message) (*pb.Ack, error) {
	s.br.Publish(msg.Topic, msg.Data)
	return &pb.Ack{Status: "ok"}, nil
}

func (s *server) Subscribe(req *pb.SubscribeRequest, stream pb.PubSub_SubscribeServer) error {
	sub := s.br.Subscribe(req.Topic)
	defer sub.Cancel()

	p, ok := peer.FromContext(stream.Context())
	ip := "unknown"
	if ok {
		ip = p.Addr.String()
	}

	s.mu.Lock()
	if s.subscriberMeta == nil {
		s.subscriberMeta = make(map[string]*pb.SubscriberMetadata)
	}
	s.subscriberMeta[sub.ID] = &pb.SubscriberMetadata{
		SubscriberId: sub.ID,
		IpAddress:    ip,
		Tags:         []string{},
	}
	s.mu.Unlock()

	stream.Send(&pb.SubscriptionMessage{SubscriberId: sub.ID, Topic: req.Topic, Data: ""})

	// // Replay old messages
	// go func() {
	// 	b := s.br
	// 	b.replayMessages(req.Topic, sub.Chan.(chan string))
	// }()

	heartbeatTimeout := 60 * time.Second
	ticker := time.NewTicker(heartbeatTimeout)
	defer ticker.Stop()

	for {
		select {
		case msg, ok := <-sub.Chan:
			if !ok {
				return nil
			}
			if err := stream.Send(&pb.SubscriptionMessage{SubscriberId: sub.ID, Topic: req.Topic, Data: msg}); err != nil {
				return err
			}
		case <-stream.Context().Done():
			return nil
		case <-ticker.C:
			return nil
		}
	}
}
